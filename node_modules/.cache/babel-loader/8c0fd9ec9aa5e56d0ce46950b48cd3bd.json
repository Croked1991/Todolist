{"ast":null,"code":"var _jsxFileName = \"/Users/egortihomirov/Desktop/IT/react/todolist_project/src/App.tsx\";\nimport React, { useState } from 'react';\nimport { v1 } from 'uuid';\nimport './App.css';\nimport { Todolist } from './Todolist';\n\nfunction App() {\n  const [todolists, setTodolists] = useState([{\n    id: v1(),\n    title: 'What to learn',\n    filter: 'All'\n  }, {\n    id: v1(),\n    title: 'What to buy',\n    filter: 'All'\n  }]);\n  const buttons = [{\n    id: v1(),\n    title: 'All'\n  }, {\n    id: v1(),\n    title: 'Completed'\n  }, {\n    id: v1(),\n    title: 'Active'\n  }];\n  const [tasks, setTasks] = useState([{\n    id: v1(),\n    title: \"CSS\",\n    isDone: true\n  }, {\n    id: v1(),\n    title: \"JS\",\n    isDone: true\n  }, {\n    id: v1(),\n    title: \"React\",\n    isDone: false\n  }, {\n    id: v1(),\n    title: \"Rest Api\",\n    isDone: false\n  }, {\n    id: v1(),\n    title: \"GraphQL\",\n    isDone: false\n  }]); // const [filterButton, setFilterButton] = useState<FilterValuesType>('All')\n\n  const removeTasks = id => {\n    let filtered = tasks.filter(el => el.id !== id);\n    setTasks(filtered);\n  };\n\n  const addTask = newTask => {\n    let newTitle = {\n      id: v1(),\n      title: newTask,\n      isDone: false\n    };\n    setTasks([newTitle, ...tasks]);\n  };\n\n  const taskFilter = filterValue => {// setFilterButton(filterValue)\n  };\n\n  const changeCheckboxStatus = (currentId, currentEvent) => {\n    setTasks(tasks.map(el => el.id === currentId ? { ...el,\n      isDone: currentEvent\n    } : el));\n  };\n\n  let prokladka = tasks; // if (filterButton === 'Active') {\n  //     prokladka = tasks.filter(el => el.isDone === false)\n  // }\n  // if (filterButton === 'Completed') {\n  //     prokladka = tasks.filter(el => el.isDone === true)\n  // }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, todolists.map(el => {\n    let prokladka = tasks;\n\n    if (el.filter === 'Active') {\n      prokladka = tasks.filter(el => el.isDone === false);\n    }\n\n    if (el.filter === 'Completed') {\n      prokladka = tasks.filter(el => el.isDone === true);\n    }\n\n    return /*#__PURE__*/React.createElement(Todolist, {\n      key: el.id,\n      todolistID: el.id,\n      title: el.title,\n      tasks: tasks,\n      removeTasks: removeTasks,\n      taskFilter: taskFilter,\n      prokladka: prokladka,\n      addTask: addTask,\n      changeCheckboxStatus: changeCheckboxStatus,\n      filterButton: el.filter,\n      buttons: buttons,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    });\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/egortihomirov/Desktop/IT/react/todolist_project/src/App.tsx"],"names":["React","useState","v1","Todolist","App","todolists","setTodolists","id","title","filter","buttons","tasks","setTasks","isDone","removeTasks","filtered","el","addTask","newTask","newTitle","taskFilter","filterValue","changeCheckboxStatus","currentId","currentEvent","map","prokladka"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport './App.css';\r\nimport { Todolist } from './Todolist';\r\n\r\nexport type FilterValuesType = string\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    const [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        { id: v1(), title: 'What to learn', filter: 'All' },\r\n        { id: v1(), title: 'What to buy', filter: 'All' },\r\n    ])\r\n\r\n\r\n    const buttons = [\r\n        { id: v1(), title: 'All' },\r\n        { id: v1(), title: 'Completed' },\r\n        { id: v1(), title: 'Active' }\r\n    ]\r\n\r\n\r\n    const [tasks, setTasks] = useState([\r\n        { id: v1(), title: \"CSS\", isDone: true },\r\n        { id: v1(), title: \"JS\", isDone: true },\r\n        { id: v1(), title: \"React\", isDone: false },\r\n        { id: v1(), title: \"Rest Api\", isDone: false },\r\n        { id: v1(), title: \"GraphQL\", isDone: false },\r\n    ])\r\n\r\n    // const [filterButton, setFilterButton] = useState<FilterValuesType>('All')\r\n\r\n\r\n    const removeTasks = (id: string) => {\r\n        let filtered = tasks.filter(el => el.id !== id)\r\n        setTasks(filtered)\r\n    }\r\n\r\n    const addTask = (newTask: string) => {\r\n        let newTitle = { id: v1(), title: newTask, isDone: false }\r\n        setTasks([newTitle, ...tasks]);\r\n    }\r\n\r\n\r\n    const taskFilter = (filterValue: FilterValuesType) => {\r\n        // setFilterButton(filterValue)\r\n    }\r\n\r\n    const changeCheckboxStatus = (currentId: string, currentEvent: boolean) => {\r\n        setTasks(tasks.map((el) => el.id === currentId ? { ...el, isDone: currentEvent } : el))\r\n    }\r\n\r\n\r\n    let prokladka = tasks\r\n    // if (filterButton === 'Active') {\r\n    //     prokladka = tasks.filter(el => el.isDone === false)\r\n    // }\r\n    // if (filterButton === 'Completed') {\r\n    //     prokladka = tasks.filter(el => el.isDone === true)\r\n    // }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todolists.map((el) => {\r\n                    let prokladka = tasks\r\n                    if (el.filter === 'Active') {\r\n                        prokladka = tasks.filter(el => el.isDone === false)\r\n                    }\r\n                    if (el.filter === 'Completed') {\r\n                        prokladka = tasks.filter(el => el.isDone === true)\r\n                    }\r\n\r\n                return (\r\n                    <Todolist\r\n                        key={el.id}\r\n                        todolistID={el.id}\r\n                        title={el.title}\r\n                        tasks={tasks}\r\n                        removeTasks={removeTasks}\r\n                        taskFilter={taskFilter}\r\n                        prokladka={prokladka}\r\n                        addTask={addTask}\r\n                        changeCheckboxStatus={changeCheckboxStatus}\r\n                        filterButton={el.filter}\r\n                        buttons={buttons}\r\n                    />)\r\n            })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}