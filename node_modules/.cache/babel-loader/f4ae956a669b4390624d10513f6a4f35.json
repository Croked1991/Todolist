{"ast":null,"code":"var _jsxFileName = \"/Users/egortihomirov/Desktop/IT/react/todolist_project/src/App.tsx\";\nimport React, { useState } from 'react';\nimport { v1 } from 'uuid';\nimport './App.css';\nimport { Todolist } from './Todolist';\n\nfunction App() {\n  const [tasks, setTasks] = useState([{\n    id: v1(),\n    title: \"CSS\",\n    isDone: true\n  }, {\n    id: v1(),\n    title: \"JS\",\n    isDone: true\n  }, {\n    id: v1(),\n    title: \"React\",\n    isDone: false\n  }, {\n    id: v1(),\n    title: \"Rest Api\",\n    isDone: false\n  }, {\n    id: v1(),\n    title: \"GraphQL\",\n    isDone: false\n  }]);\n  const [filterButton, setFilterButton] = useState('All');\n\n  const removeTasks = id => {\n    let filtered = tasks.filter(el => el.id !== id);\n    setTasks(filtered);\n  };\n\n  const addTask = newTask => {\n    let newTitle = {\n      id: v1(),\n      title: newTask,\n      isDone: false\n    };\n    setTasks([newTitle, ...tasks]);\n  };\n\n  const taskFilter = filterValue => {\n    setFilterButton(filterValue);\n  };\n\n  const changeCheckboxStatus = (currentId, currentEvent) => {\n    setTasks(tasks.map(el => el.id === currentId ? { ...el,\n      isDone: currentEvent\n    } : el));\n  };\n\n  let prokladka = tasks;\n\n  if (filterButton === 'Active') {\n    prokladka = tasks.filter(el => el.isDone === false);\n  }\n\n  if (filterButton === 'Completed') {\n    prokladka = tasks.filter(el => el.isDone === true);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Todolist, {\n    title: \"What do lern\",\n    tasks: tasks,\n    removeTasks: removeTasks,\n    taskFilter: taskFilter,\n    prokladka: prokladka,\n    addTask: addTask,\n    changeCheckboxStatus: changeCheckboxStatus,\n    filterButton: filterButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/egortihomirov/Desktop/IT/react/todolist_project/src/App.tsx"],"names":["React","useState","v1","Todolist","App","tasks","setTasks","id","title","isDone","filterButton","setFilterButton","removeTasks","filtered","filter","el","addTask","newTask","newTitle","taskFilter","filterValue","changeCheckboxStatus","currentId","currentEvent","map","prokladka"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport './App.css';\r\nimport { Todolist } from './Todolist';\r\n\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed'\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n    const [tasks, setTasks] = useState([\r\n        { id: v1(), title: \"CSS\", isDone: true },\r\n        { id: v1(), title: \"JS\", isDone: true },\r\n        { id: v1(), title: \"React\", isDone: false },\r\n        { id: v1(), title: \"Rest Api\", isDone: false },\r\n        { id: v1(), title: \"GraphQL\", isDone: false },\r\n    ])\r\n\r\n    const [filterButton, setFilterButton] = useState('All')\r\n   \r\n\r\n    const removeTasks = (id: string) => {\r\n        let filtered = tasks.filter(el => el.id !== id)\r\n        setTasks(filtered)\r\n    }\r\n\r\n    const addTask = (newTask: string) => {\r\n        let newTitle = { id: v1(), title: newTask, isDone: false }\r\n        setTasks([newTitle, ...tasks]);\r\n    }\r\n\r\n    \r\n    const taskFilter = (filterValue: string) => {\r\n        setFilterButton(filterValue)\r\n    }\r\n\r\n    const changeCheckboxStatus = (currentId: string, currentEvent: boolean) => {\r\n        setTasks(tasks.map((el) => el.id === currentId ? { ...el, isDone: currentEvent } : el))\r\n    }\r\n\r\n    \r\n    let prokladka = tasks\r\n    if (filterButton === 'Active') {\r\n        prokladka = tasks.filter(el => el.isDone === false)\r\n    }\r\n    if (filterButton === 'Completed') {\r\n        prokladka = tasks.filter(el => el.isDone === true)\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <Todolist title=\"What do lern\"\r\n                tasks={tasks}\r\n                removeTasks={removeTasks}\r\n                taskFilter={taskFilter}\r\n                prokladka={prokladka}\r\n                addTask={addTask}\r\n                changeCheckboxStatus={changeCheckboxStatus}\r\n                filterButton={filterButton}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}