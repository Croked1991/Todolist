{"ast":null,"code":"var _jsxFileName = \"/Users/egortihomirov/Desktop/IT/react/todolist_project/src/components/AddItemForm.tsx\";\nimport React from \"react\";\nimport style from \"../Todolist.module.css\";\nimport { useState } from 'react';\nexport const AddItemForm = props => {\n  const [newTask, setNewTask] = useState('');\n  const [error, setError] = useState(null);\n\n  const onClickHandler = () => {\n    if (newTask.trim() !== '') {\n      props.callback(props.todolistID, newTask.trim());\n      setNewTask('');\n    } else setError('Error. You got wrong');\n  };\n\n  const onKeyPressHadler = event => {\n    if (event.key === 'Enter') {\n      onClickHandler();\n    }\n  };\n\n  const setNewTaskHandler = event => {\n    setError(null);\n    setNewTask(event.currentTarget.value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: error ? style.error : '',\n    value: newTask,\n    onKeyPress: onKeyPressHadler,\n    onChange: setNewTaskHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onClickHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, \"+\"), error && /*#__PURE__*/React.createElement(\"p\", {\n    className: style.errorMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 23\n    }\n  }, error));\n};","map":{"version":3,"sources":["/Users/egortihomirov/Desktop/IT/react/todolist_project/src/components/AddItemForm.tsx"],"names":["React","style","useState","AddItemForm","props","newTask","setNewTask","error","setError","onClickHandler","trim","callback","todolistID","onKeyPressHadler","event","key","setNewTaskHandler","currentTarget","value","errorMessage"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,SAASC,QAAT,QAAqD,OAArD;AASA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAA4B;AAEnD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAgB,IAAhB,CAAlC;;AAEA,QAAMO,cAAc,GAAG,MAAM;AACzB,QAAIJ,OAAO,CAACK,IAAR,OAAmB,EAAvB,EAA2B;AACvBN,MAAAA,KAAK,CAACO,QAAN,CAAeP,KAAK,CAACQ,UAArB,EAAgCP,OAAO,CAACK,IAAR,EAAhC;AACAJ,MAAAA,UAAU,CAAC,EAAD,CAAV;AACH,KAHD,MAGOE,QAAQ,CAAC,sBAAD,CAAR;AACV,GALD;;AAOA,QAAMK,gBAAgB,GAAIC,KAAD,IAA4C;AACjE,QAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2B;AACvBN,MAAAA,cAAc;AACjB;AACJ,GAJD;;AAMA,QAAMO,iBAAiB,GAAIF,KAAD,IAA0C;AAChEN,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,IAAAA,UAAU,CAACQ,KAAK,CAACG,aAAN,CAAoBC,KAArB,CAAV;AACH,GAHD;;AAKA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,SAAS,EAAEX,KAAK,GAAGN,KAAK,CAACM,KAAT,GAAiB,EAAxC;AACI,IAAA,KAAK,EAAEF,OADX;AAEI,IAAA,UAAU,EAAEQ,gBAFhB;AAGI,IAAA,QAAQ,EAAEG,iBAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAMI;AAAQ,IAAA,OAAO,EAAEP,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SANJ,EAOKF,KAAK,iBAAI;AAAG,IAAA,SAAS,EAAEN,KAAK,CAACkB,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmCZ,KAAnC,CAPd,CADJ;AAWH,CAlCM","sourcesContent":["import React from \"react\";\nimport style from \"../Todolist.module.css\"\nimport { useState, KeyboardEvent, ChangeEvent } from 'react';\n\ntype AddItemFormType = {\n    callback: (id:string, newTask:string)=>void\n    todolistID: string\n}\n\n\n\nexport const AddItemForm = (props: AddItemFormType) => {\n\n    const [newTask, setNewTask] = useState('')\n    const [error, setError] = useState<string | null>(null)\n\n    const onClickHandler = () => {\n        if (newTask.trim() !== '') {\n            props.callback(props.todolistID,newTask.trim())\n            setNewTask('')\n        } else setError('Error. You got wrong')\n    }\n\n    const onKeyPressHadler = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            onClickHandler()\n        }\n    }\n\n    const setNewTaskHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        setError(null)\n        setNewTask(event.currentTarget.value)\n    }\n\n    return (\n        <div>\n            <input className={error ? style.error : ''}\n                value={newTask}\n                onKeyPress={onKeyPressHadler}\n                onChange={setNewTaskHandler}\n            />\n            <button onClick={onClickHandler}>+</button>\n            {error && <p className={style.errorMessage}>{error}</p>}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}