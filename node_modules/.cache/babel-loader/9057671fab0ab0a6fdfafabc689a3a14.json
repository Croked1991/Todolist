{"ast":null,"code":"var _jsxFileName = \"/Users/egortihomirov/Desktop/IT/react/todolist_project/src/App.tsx\";\nimport React, { useState } from 'react';\nimport { v1 } from 'uuid';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { AddItemForm } from './components/AddItemForm';\n\nfunction App() {\n  let todolistID1 = v1();\n  let todolistID2 = v1();\n  const [todolists, setTodolists] = useState([{\n    id: todolistID1,\n    title: 'What to learn',\n    filter: 'All'\n  }, {\n    id: todolistID2,\n    title: 'What to buy',\n    filter: 'All'\n  }]);\n  const [tasks, setTasks] = useState({\n    [todolistID1]: [{\n      id: v1(),\n      title: \"CSS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"JS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"React\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"Rest Api\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"GraphQL\",\n      isDone: false\n    }],\n    [todolistID2]: [{\n      id: v1(),\n      title: \"CSS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"JS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"React\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"Rest Api\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"GraphQL\",\n      isDone: false\n    }]\n  });\n  const buttons = [{\n    id: v1(),\n    title: 'All'\n  }, {\n    id: v1(),\n    title: 'Completed'\n  }, {\n    id: v1(),\n    title: 'Active'\n  }];\n\n  const removeTasks = (todolistID, id) => {\n    // let filtered = tasks[todolistID].filter(el => el.id !== id)\n    setTasks({ ...tasks,\n      [todolistID]: tasks[todolistID].filter(el => el.id !== id)\n    });\n  };\n\n  const addTask = (todolistID, newTask) => {\n    let newTitle = {\n      id: v1(),\n      title: newTask,\n      isDone: false\n    };\n    setTasks({ ...tasks,\n      [todolistID]: [newTitle, ...tasks[todolistID]]\n    });\n  };\n\n  const taskFilter = (todolistID, filterValue) => {\n    setTodolists(todolists.map(el => el.id === todolistID ? { ...el,\n      filter: filterValue\n    } : el));\n  };\n\n  const changeCheckboxStatus = (todolistID, currentId, currentEvent) => {\n    setTasks({ ...tasks,\n      [todolistID]: tasks[todolistID].map(el => el.id === currentId ? { ...el,\n        isDone: currentEvent\n      } : el)\n    });\n  };\n\n  const addTodolist = () => {\n    let newID = v1();\n    let newTodolist = {\n      id: newID,\n      title: 'What to buy',\n      filter: 'All'\n    };\n    setTodolists([newTodolist, ...todolists]);\n  };\n\n  const removeTodolist = todolistID => {\n    setTodolists(todolists.filter(el => el.id !== todolistID));\n    delete tasks[todolistID];\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AddItemForm, {\n    callback: () => {},\n    todolistID: '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }), todolists.map(el => {\n    let prokladka = tasks[el.id];\n\n    if (el.filter === 'Active') {\n      prokladka = tasks[el.id].filter(el => el.isDone === false);\n    }\n\n    if (el.filter === 'Completed') {\n      prokladka = tasks[el.id].filter(el => el.isDone === true);\n    }\n\n    return /*#__PURE__*/React.createElement(Todolist, {\n      key: el.id,\n      todolistID: el.id,\n      title: el.title,\n      tasks: tasks,\n      removeTasks: removeTasks,\n      taskFilter: taskFilter,\n      prokladka: prokladka,\n      addTask: addTask,\n      changeCheckboxStatus: changeCheckboxStatus,\n      filterButton: el.filter,\n      buttons: buttons,\n      removeTodolist: removeTodolist,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    });\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/egortihomirov/Desktop/IT/react/todolist_project/src/App.tsx"],"names":["React","useState","v1","Todolist","AddItemForm","App","todolistID1","todolistID2","todolists","setTodolists","id","title","filter","tasks","setTasks","isDone","buttons","removeTasks","todolistID","el","addTask","newTask","newTitle","taskFilter","filterValue","map","changeCheckboxStatus","currentId","currentEvent","addTodolist","newID","newTodolist","removeTodolist","prokladka"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport './App.css';\r\nimport { Todolist, TodolistIDType } from './Todolist';\r\nimport { AddItemForm } from './components/AddItemForm';\r\n\r\nexport type FilterValuesType = string\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    let todolistID1=v1()\r\n    let todolistID2=v1()\r\n\r\n    \r\n    const [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        { id: todolistID1, title: 'What to learn', filter: 'All' },\r\n        { id: todolistID2, title: 'What to buy', filter: 'All' },\r\n    ])\r\n\r\n        const [tasks, setTasks] = useState<TodolistIDType>({\r\n        [todolistID1]:[\r\n            { id: v1(), title: \"CSS\", isDone: true },\r\n            { id: v1(), title: \"JS\", isDone: true },\r\n            { id: v1(), title: \"React\", isDone: false },\r\n            { id: v1(), title: \"Rest Api\", isDone: false },\r\n            { id: v1(), title: \"GraphQL\", isDone: false },\r\n        ],\r\n        [todolistID2]:[\r\n            { id: v1(), title: \"CSS\", isDone: true },\r\n            { id: v1(), title: \"JS\", isDone: true },\r\n            { id: v1(), title: \"React\", isDone: false },\r\n            { id: v1(), title: \"Rest Api\", isDone: false },\r\n            { id: v1(), title: \"GraphQL\", isDone: false },\r\n            ],\r\n    })\r\n\r\n\r\n    const buttons = [\r\n        { id: v1(), title: 'All' },\r\n        { id: v1(), title: 'Completed' },\r\n        { id: v1(), title: 'Active' }\r\n    ]\r\n\r\n    const removeTasks = (todolistID:string, id: string) => {\r\n        // let filtered = tasks[todolistID].filter(el => el.id !== id)\r\n        setTasks({...tasks, [todolistID]: tasks[todolistID].filter(el => el.id !== id) })\r\n    }\r\n\r\n    const addTask = (todolistID:string, newTask: string) => {\r\n        let newTitle = { id: v1(), title: newTask, isDone: false }\r\n        setTasks({...tasks, [todolistID]: [newTitle, ...tasks[todolistID]] });\r\n    }\r\n\r\n\r\n    const taskFilter = (todolistID:string, filterValue: FilterValuesType) => {\r\n        setTodolists(todolists.map(el=>el.id === todolistID ? {...el, filter : filterValue } : el))\r\n    }\r\n\r\n    const changeCheckboxStatus = (todolistID:string, currentId: string, currentEvent: boolean) => {\r\n        setTasks({...tasks, [todolistID]: tasks[todolistID].map(el => el.id === currentId ? { ...el, isDone: currentEvent } : el)})\r\n    }\r\n\r\n    const addTodolist = () => {\r\n        let newID = v1()\r\n        let newTodolist =  { id: newID, title: 'What to buy', filter: 'All' }\r\n        setTodolists([newTodolist, ...todolists])\r\n    }\r\n\r\n    const removeTodolist = (todolistID:string) => {\r\n        setTodolists(todolists.filter(el=>el.id !== todolistID))\r\n        delete tasks[todolistID]\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm callback={()=>{}} todolistID={''}/>\r\n            {todolists.map((el) => {\r\n                    let prokladka = tasks[el.id]\r\n                    if (el.filter === 'Active') {\r\n                        prokladka = tasks[el.id].filter(el => el.isDone === false)\r\n                    }\r\n                    if (el.filter === 'Completed') {\r\n                        prokladka = tasks[el.id].filter(el => el.isDone === true)\r\n                    }\r\n\r\n                return (\r\n                    <Todolist\r\n                        key={el.id}\r\n                        todolistID={el.id}\r\n                        title={el.title}\r\n                        tasks={tasks}\r\n                        removeTasks={removeTasks}\r\n                        taskFilter={taskFilter}\r\n                        prokladka={prokladka}\r\n                        addTask={addTask}\r\n                        changeCheckboxStatus={changeCheckboxStatus}\r\n                        filterButton={el.filter}\r\n                        buttons={buttons}\r\n                        removeTodolist={removeTodolist}\r\n                    />)\r\n            })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}