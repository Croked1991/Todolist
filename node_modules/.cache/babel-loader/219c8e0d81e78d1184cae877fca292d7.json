{"ast":null,"code":"var _jsxFileName = \"/Users/egortihomirov/Desktop/IT/react/todolist_project/src/Todolist.tsx\";\nimport React from 'react';\nimport { useState } from 'react';\nimport { UniButton } from './components/Button';\nimport { Checkbox } from './components/Checkbox';\nimport style from './Todolist.module.css';\nexport function Todolist(props) {\n  const [newTask, setNewTask] = useState('');\n  const [error, setError] = useState(null);\n\n  const onClickHandler = () => {\n    if (newTask.trim() !== '') {\n      props.addTask(newTask.trim());\n      setNewTask('');\n    } else setError('Error. You got wrong');\n  };\n\n  const onKeyPressHadler = event => {\n    if (event.key === 'Enter') {\n      onClickHandler();\n    }\n  };\n\n  const setNewTaskHandler = event => {\n    setError(null);\n    setNewTask(event.currentTarget.value);\n  };\n\n  const removeTaskHandler = elid => {\n    props.removeTasks(elid);\n  };\n\n  const filterHandler = filterValue => {\n    props.taskFilter(filterValue);\n  };\n\n  const checkboxHandler = (currentId, currentEvent) => {\n    props.changeCheckboxStatus(currentId, currentEvent);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, props.title), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: error ? style.error : '',\n    value: newTask,\n    onKeyPress: onKeyPressHadler,\n    onChange: setNewTaskHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onClickHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  }, \"+\"), error && /*#__PURE__*/React.createElement(\"p\", {\n    className: style.errorMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 31\n    }\n  }, error)), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, props.prokladka.map(el => {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: el.id,\n      className: el.isDone === true ? style.isDone : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      check: el.isDone,\n      callBack: currentEvent => checkboxHandler(el.id, currentEvent),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 33\n      }\n    }, el.title), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => removeTaskHandler(el.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 33\n      }\n    }, \"X\"));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(UniButton, {\n    filterButton: props.filterButton,\n    filterHandler: filterHandler,\n    buttons: props.buttons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/egortihomirov/Desktop/IT/react/todolist_project/src/Todolist.tsx"],"names":["React","useState","UniButton","Checkbox","style","Todolist","props","newTask","setNewTask","error","setError","onClickHandler","trim","addTask","onKeyPressHadler","event","key","setNewTaskHandler","currentTarget","value","removeTaskHandler","elid","removeTasks","filterHandler","filterValue","taskFilter","checkboxHandler","currentId","currentEvent","changeCheckboxStatus","title","errorMessage","prokladka","map","el","id","isDone","filterButton","buttons"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAqD,OAArD;AAEA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AAyBA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAoC;AAEvC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AAEA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAkB,IAAlB,CAAlC;;AAGA,QAAMU,cAAc,GAAG,MAAM;AACzB,QAAIJ,OAAO,CAACK,IAAR,OAAmB,EAAvB,EAA2B;AACvBN,MAAAA,KAAK,CAACO,OAAN,CAAcN,OAAO,CAACK,IAAR,EAAd;AACAJ,MAAAA,UAAU,CAAC,EAAD,CAAV;AACH,KAHD,MAGOE,QAAQ,CAAC,sBAAD,CAAR;AAGV,GAPD;;AASA,QAAMI,gBAAgB,GAAIC,KAAD,IAA4C;AACjE,QAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2B;AACvBL,MAAAA,cAAc;AACjB;AAEJ,GALD;;AAOA,QAAMM,iBAAiB,GAAIF,KAAD,IAA0C;AAChEL,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,IAAAA,UAAU,CAACO,KAAK,CAACG,aAAN,CAAoBC,KAArB,CAAV;AACH,GAHD;;AAKA,QAAMC,iBAAiB,GAAIC,IAAD,IAAkB;AACxCf,IAAAA,KAAK,CAACgB,WAAN,CAAkBD,IAAlB;AACH,GAFD;;AAIA,QAAME,aAAa,GAAIC,WAAD,IAAmC;AACrDlB,IAAAA,KAAK,CAACmB,UAAN,CAAiBD,WAAjB;AACH,GAFD;;AAIA,QAAME,eAAe,GAAG,CAACC,SAAD,EAAoBC,YAApB,KAA8C;AAClEtB,IAAAA,KAAK,CAACuB,oBAAN,CAA2BF,SAA3B,EAAsCC,YAAtC;AACH,GAFD;;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKtB,KAAK,CAACwB,KAAX,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,SAAS,EAAErB,KAAK,GAAGL,KAAK,CAACK,KAAT,GAAiB,EAAxC;AACI,IAAA,KAAK,EAAEF,OADX;AAEI,IAAA,UAAU,EAAEO,gBAFhB;AAGI,IAAA,QAAQ,EAAEG,iBAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAMI;AAAQ,IAAA,OAAO,EAAEN,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SANJ,EAOKF,KAAK,iBAAI;AAAG,IAAA,SAAS,EAAEL,KAAK,CAAC2B,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmCtB,KAAnC,CAPd,CAFJ,eAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,KAAK,CAAC0B,SAAN,CAAgBC,GAAhB,CAAqBC,EAAD,IAAkB;AACnC,wBACI;AAAI,MAAA,GAAG,EAAEA,EAAE,CAACC,EAAZ;AAAgB,MAAA,SAAS,EAAED,EAAE,CAACE,MAAH,KAAc,IAAd,GAAqBhC,KAAK,CAACgC,MAA3B,GAAmC,EAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEF,EAAE,CAACE,MAApB;AAA4B,MAAA,QAAQ,EAAGR,YAAD,IAAgBF,eAAe,CAACQ,EAAE,CAACC,EAAJ,EAAQP,YAAR,CAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOM,EAAE,CAACJ,KAAV,CAFJ,eAGI;AAAQ,MAAA,OAAO,EAAE,MAAMV,iBAAiB,CAACc,EAAE,CAACC,EAAJ,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAHJ,CADJ;AAOH,GARA,CADL,CAXJ,eAsBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,YAAY,EAAE7B,KAAK,CAAC+B,YAA/B;AAA6C,IAAA,aAAa,EAAEd,aAA5D;AAA2E,IAAA,OAAO,EAAEjB,KAAK,CAACgC,OAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAtBJ,CADJ,CADJ;AA8BH","sourcesContent":["import { type } from 'os';\nimport React from 'react';\nimport { useState, KeyboardEvent, ChangeEvent } from 'react';\nimport { FilterValuesType } from './App';\nimport { UniButton } from './components/Button';\nimport { Checkbox } from './components/Checkbox';\nimport style from './Todolist.module.css'\n\nexport type TaskType = {\n    title: string;\n    id: string;\n    isDone: boolean;\n}\n\nexport type ButtonType = {\n    id: string\n    title: string\n}\n\ntype PropsType = {\n    title: string;\n    tasks: Array<TaskType>;\n    removeTasks: (id: string) => void;\n    taskFilter: (filterValue: FilterValuesType) => void;\n    prokladka: Array<TaskType>;\n    addTask: (newTask: string) => void;\n    changeCheckboxStatus: (currentId: string, eventStatus: boolean) => void\n    filterButton: FilterValuesType \n    buttons: ButtonType[]\n}\n\nexport function Todolist(props: PropsType) {\n\n    const [newTask, setNewTask] = useState('')\n\n    const [error, setError] = useState <string | null> (null)\n\n\n    const onClickHandler = () => {\n        if (newTask.trim() !== '') {\n            props.addTask(newTask.trim())\n            setNewTask('')\n        } else setError('Error. You got wrong')\n\n\n    }\n\n    const onKeyPressHadler = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            onClickHandler()\n        }\n\n    }\n\n    const setNewTaskHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        setError(null)\n        setNewTask(event.currentTarget.value)\n    }\n\n    const removeTaskHandler = (elid: string) => {\n        props.removeTasks(elid)\n    }\n\n    const filterHandler = (filterValue: FilterValuesType) => {\n        props.taskFilter(filterValue)\n    }\n\n    const checkboxHandler = (currentId: string, currentEvent: boolean) => {\n        props.changeCheckboxStatus(currentId, currentEvent)\n    }\n\n    return (\n        <div className=\"App\">\n            <div>\n                <h3>{props.title}</h3>\n                <div>\n                    <input className={error ? style.error : ''}\n                        value={newTask}\n                        onKeyPress={onKeyPressHadler}\n                        onChange={setNewTaskHandler}\n                    />\n                    <button onClick={onClickHandler}>+</button>\n                    {error && <p className={style.errorMessage}>{error}</p> }\n                </div>\n                <ul >\n                    {props.prokladka.map((el: TaskType) => {\n                        return (\n                            <li key={el.id} className={el.isDone === true ? style.isDone: \"\"}>\n                                <Checkbox check={el.isDone} callBack={(currentEvent)=>checkboxHandler(el.id, currentEvent)}/>\n                                <span>{el.title}</span>\n                                <button onClick={() => removeTaskHandler(el.id)}>X</button>\n                            </li>\n                        )\n                    })}\n                </ul>\n                <div>\n                    <UniButton filterButton={props.filterButton} filterHandler={filterHandler} buttons={props.buttons}/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}