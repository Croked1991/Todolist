{"ast":null,"code":"var _jsxFileName = \"/Users/egortihomirov/Desktop/IT/react/todolist_project/src/App.tsx\";\nimport React, { useState } from 'react';\nimport { v1 } from 'uuid';\nimport './App.css';\nimport { Todolist } from './Todolist';\n\nfunction App() {\n  let todolistID1 = v1();\n  let todolistID2 = v1();\n  const [todolists, setTodolists] = useState([{\n    id: todolistID1,\n    title: 'What to learn',\n    filter: 'All'\n  }, {\n    id: todolistID2,\n    title: 'What to buy',\n    filter: 'All'\n  }]); // const [todolists, setTodolists] = useState<Array<TodolistType>>([\n  //     { id: v1(), title: 'What to learn', filter: 'All' },\n  //     { id: v1(), title: 'What to buy', filter: 'All' },\n  // ])\n  // const buttons = [\n  //     { id: v1(), title: 'All' },\n  //     { id: v1(), title: 'Completed' },\n  //     { id: v1(), title: 'Active' }\n  // ]\n  // const [tasks, setTasks] = useState([\n  //     { id: v1(), title: \"CSS\", isDone: true },\n  //     { id: v1(), title: \"JS\", isDone: true },\n  //     { id: v1(), title: \"React\", isDone: false },\n  //     { id: v1(), title: \"Rest Api\", isDone: false },\n  //     { id: v1(), title: \"GraphQL\", isDone: false },\n  // ])\n  // // const [filterButton, setFilterButton] = useState<FilterValuesType>('All')\n\n  const removeTasks = id => {\n    let filtered = tasks.filter(el => el.id !== id);\n    setTasks(filtered);\n  };\n\n  const addTask = newTask => {\n    let newTitle = {\n      id: v1(),\n      title: newTask,\n      isDone: false\n    };\n    setTasks([newTitle, ...tasks]);\n  };\n\n  const taskFilter = (todolistID, filterValue) => {\n    setTodolists(todolists.map(el => el.id === todolistID ? { ...el,\n      filter: filterValue\n    } : el));\n  };\n\n  const changeCheckboxStatus = (todolistID, currentId, currentEvent) => {\n    setTasks(tasks.map(el => el.id === currentId ? { ...el,\n      isDone: currentEvent\n    } : el));\n  }; // let prokladka = tasks\n  // if (filterButton === 'Active') {\n  //     prokladka = tasks.filter(el => el.isDone === false)\n  // }\n  // if (filterButton === 'Completed') {\n  //     prokladka = tasks.filter(el => el.isDone === true)\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, todolists.map(el => {\n    let prokladka = tasks;\n\n    if (el.filter === 'Active') {\n      prokladka = tasks.filter(el => el.isDone === false);\n    }\n\n    if (el.filter === 'Completed') {\n      prokladka = tasks.filter(el => el.isDone === true);\n    }\n\n    return /*#__PURE__*/React.createElement(Todolist, {\n      key: el.id,\n      todolistID: el.id,\n      title: el.title,\n      tasks: tasks,\n      removeTasks: removeTasks,\n      taskFilter: taskFilter,\n      prokladka: prokladka,\n      addTask: addTask,\n      changeCheckboxStatus: changeCheckboxStatus,\n      filterButton: el.filter,\n      buttons: buttons,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    });\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/egortihomirov/Desktop/IT/react/todolist_project/src/App.tsx"],"names":["React","useState","v1","Todolist","App","todolistID1","todolistID2","todolists","setTodolists","id","title","filter","removeTasks","filtered","tasks","el","setTasks","addTask","newTask","newTitle","isDone","taskFilter","todolistID","filterValue","map","changeCheckboxStatus","currentId","currentEvent","prokladka","buttons"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport './App.css';\r\nimport { Todolist } from './Todolist';\r\n\r\nexport type FilterValuesType = string\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    let todolistID1=v1()\r\n    let todolistID2=v1()\r\n\r\n    \r\n    const [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        { id: todolistID1, title: 'What to learn', filter: 'All' },\r\n        { id: todolistID2, title: 'What to buy', filter: 'All' },\r\n    ])\r\n\r\n    // const [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n    //     { id: v1(), title: 'What to learn', filter: 'All' },\r\n    //     { id: v1(), title: 'What to buy', filter: 'All' },\r\n    // ])\r\n\r\n\r\n    // const buttons = [\r\n    //     { id: v1(), title: 'All' },\r\n    //     { id: v1(), title: 'Completed' },\r\n    //     { id: v1(), title: 'Active' }\r\n    // ]\r\n\r\n\r\n    // const [tasks, setTasks] = useState([\r\n    //     { id: v1(), title: \"CSS\", isDone: true },\r\n    //     { id: v1(), title: \"JS\", isDone: true },\r\n    //     { id: v1(), title: \"React\", isDone: false },\r\n    //     { id: v1(), title: \"Rest Api\", isDone: false },\r\n    //     { id: v1(), title: \"GraphQL\", isDone: false },\r\n    // ])\r\n\r\n    // // const [filterButton, setFilterButton] = useState<FilterValuesType>('All')\r\n\r\n\r\n    const removeTasks = (id: string) => {\r\n        let filtered = tasks.filter(el => el.id !== id)\r\n        setTasks(filtered)\r\n    }\r\n\r\n    const addTask = (newTask: string) => {\r\n        let newTitle = { id: v1(), title: newTask, isDone: false }\r\n        setTasks([newTitle, ...tasks]);\r\n    }\r\n\r\n\r\n    const taskFilter = (todolistID:string, filterValue: FilterValuesType) => {\r\n        setTodolists(todolists.map(el=>el.id === todolistID ? {...el, filter : filterValue } : el))\r\n    }\r\n\r\n    const changeCheckboxStatus = (todolistID:string, currentId: string, currentEvent: boolean) => {\r\n        setTasks(tasks.map(el => el.id === currentId ? { ...el, isDone: currentEvent } : el))\r\n    }\r\n\r\n\r\n    // let prokladka = tasks\r\n    // if (filterButton === 'Active') {\r\n    //     prokladka = tasks.filter(el => el.isDone === false)\r\n    // }\r\n    // if (filterButton === 'Completed') {\r\n    //     prokladka = tasks.filter(el => el.isDone === true)\r\n    // }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todolists.map((el) => {\r\n                    let prokladka = tasks\r\n                    if (el.filter === 'Active') {\r\n                        prokladka = tasks.filter(el => el.isDone === false)\r\n                    }\r\n                    if (el.filter === 'Completed') {\r\n                        prokladka = tasks.filter(el => el.isDone === true)\r\n                    }\r\n\r\n                return (\r\n                    <Todolist\r\n                        key={el.id}\r\n                        todolistID={el.id}\r\n                        title={el.title}\r\n                        tasks={tasks}\r\n                        removeTasks={removeTasks}\r\n                        taskFilter={taskFilter}\r\n                        prokladka={prokladka}\r\n                        addTask={addTask}\r\n                        changeCheckboxStatus={changeCheckboxStatus}\r\n                        filterButton={el.filter}\r\n                        buttons={buttons}\r\n                    />)\r\n            })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}